import numpy as np
import sys
import extract_features
from os import listdir
from os.path import isfile, join


# use random forest - svm according to the web file of drebin for best results

def read(LOAD_DATA=False):
    if LOAD_DATA:
        print("Read is starting")
        mypath = "feature_vectors"
        files = [f for f in listdir(mypath) if isfile(join(mypath, f))]

        # mlist=[]
        # for f in listdir("feature_vectors"):
        #     if isfile(join("feature_vectors",f)):
        #         mlist.append(f)

        print("Loading csv file")
        real_values_csv = np.loadtxt("sha256_family.csv", delimiter=",", skiprows=1, dtype=str)

        print("Detecting viruses")
        malware = []
        not_malware = []
        for virus in files:
            if virus in real_values_csv[:, 0]:
                malware.append(virus)
                # family name may be added here
            else:
                if len(not_malware) < 5560:
                    not_malware.append(virus)

        print("Feature Extraction ->")
        feature_vector = []
        label = []
        for text_file in malware:
            sys.stdin = open("%s/%s" % (mypath, text_file))
            features = sys.stdin.readlines()
            sample = extract_features.count(features)
            feature_vector.append(sample)
            label.append(1)

        for text_file in not_malware:
            sys.stdin = open("%s/%s" % (mypath, text_file))
            features = sys.stdin.readlines()
            sample = extract_features.count(features)
            feature_vector.append(sample)
            label.append(0)

        print("Data is read successfully")
        feature_vector = np.array(feature_vector)
        label = np.array(label)
        print(feature_vector.shape, label.shape)

        print("Saving data under data_numpy directory ...")
        np.save("data_numpy/x_all.npy", feature_vector)
        np.save("data_numpy/y_all.npy", label)

        return feature_vector, label
    else:
        print("Loading previous data ...")
        x_old = np.load("data_numpy/x_all.npy")
        y_old = np.load("data_numpy/y_all.npy")
        print(x_old.shape, y_old.shape)
        return x_old, y_old


if __name__ == "__main__":
    read(LOAD_DATA=True)
